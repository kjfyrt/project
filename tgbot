   import logging
   import requests
   from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
   from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, MessageHandler, Filters, CallbackContext
   CHAT_GPT_API_KEY = 'your_chat_gpt_api_key'

   CHAT_GPT_URL = 'https://api.chatgpt.com/v1/message'

   logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
   logger = logging.getLogger(__name__)

   
   def query_chatgpt(prompt):
       response = requests.post(
           CHAT_GPT_URL,
           headers={'Authorization': f'Bearer {CHAT_GPT_API_KEY}'},
           json={'prompt': prompt, 'max_tokens': 150}
       )
       data = response.json()
       return data['choices'][0]['message'] if 'choices' in data else "Ошибка обработки запроса"

   def start(update: Update, context: CallbackContext) -> None:
       keyboard = [
           [InlineKeyboardButton("Математика", callback_data='math')],
           [InlineKeyboardButton("Физика", callback_data='physics')],
           [InlineKeyboardButton("Литература", callback_data='literature')],
           [InlineKeyboardButton("История", callback_data='history')],
           [InlineKeyboardButton("Назад", callback_data='back')]
       ]
       reply_markup = InlineKeyboardMarkup(keyboard)
       update.message.reply_text('Выберите тему для изучения:', reply_markup=reply_markup)

   
   def button(update: Update, context: CallbackContext) -> None:
       query = update.callback_query
       query.answer()
       if query.data == 'back':
           start(update, context)
       else:
           response = query_chatgpt(f"Учебные материалы по {query.data}")
           query.edit_message_text(text=response)

   
   def error(update: Update, context: CallbackContext) -> None:
       logger.warning('Update "%s" caused error "%s"', update, context.error)

   def main():
       
       updater = Updater("YOUR_TELEGRAM_BOT_TOKEN")

       
       dp = updater.dispatcher

       dp.add_handler(CommandHandler('start', start))
       dp.add_handler(CallbackQueryHandler(button))
       dp.add_error_handler(error)

    
       updater.start_polling()
       updater.idle()

   if __name__ == '__main__':
       main()
